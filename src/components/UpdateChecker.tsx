import * as Updates from 'expo-updates';
import React, { useEffect, useState } from 'react';
import { Alert, View, StyleSheet } from 'react-native';
import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';

interface UpdateCheckerProps {
  onUpdateAvailable?: () => void;
}

export default function UpdateChecker({ onUpdateAvailable }: UpdateCheckerProps) {
  const [updateStatus, setUpdateStatus] = useState<string>('');
  const [isChecking, setIsChecking] = useState(false);

  useEffect(() => {
    checkForUpdates();
  }, []);

  const checkForUpdates = async () => {
    if (__DEV__) {
      // Skip update checks in development
      console.log('üîÑ UpdateChecker: Skipping updates in development mode');
      return;
    }

    setIsChecking(true);
    setUpdateStatus('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');

    try {
      const update = await Updates.checkForUpdateAsync();
      
      if (update.isAvailable) {
        setUpdateStatus('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ');
        onUpdateAvailable?.();
        
        Alert.alert(
          '–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
          '–ù–∞–π–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –õ–∏—Ü–µ–π 67. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å?',
          [
            {
              text: '–ü–æ–∑–∂–µ',
              style: 'cancel',
              onPress: () => setUpdateStatus('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ')
            },
            {
              text: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
              onPress: () => downloadAndReload(),
            },
          ]
        );
      } else {
        setUpdateStatus('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ');
        console.log('‚úÖ UpdateChecker: App is up to date');
      }
    } catch (error) {
      console.error('‚ùå UpdateChecker: Error checking for updates:', error);
      setUpdateStatus('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
    } finally {
      setIsChecking(false);
    }
  };

  const downloadAndReload = async () => {
    try {
      setUpdateStatus('–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
      await Updates.fetchUpdateAsync();
      
      setUpdateStatus('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
      await Updates.reloadAsync();
    } catch (error) {
      console.error('‚ùå UpdateChecker: Error downloading update:', error);
      setUpdateStatus('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      
      Alert.alert(
        '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
        '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        [{ text: 'OK' }]
      );
    }
  };

  const manualCheckForUpdates = async () => {
    if (__DEV__) {
      Alert.alert(
        '–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
        [{ text: 'OK' }]
      );
      return;
    }

    await checkForUpdates();
  };

  // Don't render in development mode
  if (__DEV__) {
    return null;
  }

  return (
    <ThemedView style={styles.container}>
      {isChecking && (
        <ThemedText style={styles.statusText}>
          {updateStatus}
        </ThemedText>
      )}
    </ThemedView>
  );
}

const styles = StyleSheet.create({
  container: {
    padding: 8,
  },
  statusText: {
    fontSize: 12,
    color: '#666',
    textAlign: 'center',
  },
});

// Export function for manual update checking
export const checkForUpdatesManually = async (): Promise<void> => {
  if (__DEV__) {
    Alert.alert(
      '–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
      '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
      [{ text: 'OK' }]
    );
    return;
  }

  try {
    const update = await Updates.checkForUpdateAsync();
    
    if (update.isAvailable) {
      Alert.alert(
        '–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
        '–ù–∞–π–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å?',
        [
          { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
          {
            text: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
            onPress: async () => {
              try {
                await Updates.fetchUpdateAsync();
                await Updates.reloadAsync();
              } catch (error) {
                console.error('Error downloading update:', error);
                Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
              }
            },
          },
        ]
      );
    } else {
      Alert.alert(
        '–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
        '–£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
        [{ text: 'OK' }]
      );
    }
  } catch (error) {
    console.error('Error checking for updates:', error);
    Alert.alert(
      '–û—à–∏–±–∫–∞',
      '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.',
      [{ text: 'OK' }]
    );
  }
};